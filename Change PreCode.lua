
--[[message
A shell script generator, which replaces the pre-release scripts into official scripts.
]]
local script={}
local script_={}
local sql={}
local output_func=Debug and Debug.Message or print
function SplitData(inputstr)
	local t={}
	for str in string.gmatch(inputstr,"([^|]+)") do
		table.insert(t,str)
	end
	return t
end
function LoadDB(db)
	local res={}
	local res_rev={}
	local file=io.popen('echo .exit | sqlite3 '..db..' -cmd "select id,name from texts;"')
	local count=0
	for line in file:lines() do
		local data=SplitData(line)
		local code=tonumber(data[1])
		local name=data[2]
		if code and name then
			res[code]=name
			res_rev[name]=code
		end
		count=count+1
	end
	file:close()
	return res,res_rev,count
end
function Replace(old,new)
	if not old or old==new then return end
	output_func("Will replace "..old.." to "..new..".")
	table.insert(script,"echo \"Moving "..old.." to "..new..".\"")
	table.insert(script,"mv -f ./output/script/c"..old..".lua ./output/script/c"..new..".lua")
	table.insert(script,"mv -f ./output/pics/"..old..".jpg ./output/pics/"..new..".jpg")
	table.insert(script,"mv -f ./output/pics/"..old..".png ./output/pics/"..new..".png")
	table.insert(script,"mv -f ./output/pics/field/"..old..".jpg ./output/pics/field/"..new..".jpg")
	table.insert(script,"mv -f ./output/pics/field/"..old..".png ./output/pics/field/"..new..".png")
	table.insert(script_,"echo \"Replacing "..old.." to "..new..".\"")
	table.insert(script_,"sed -i 's/"..old.."/"..new.."/g' ./output/script/c*.lua")
	for i=1,9 do
		table.insert(script_,"sed -i 's/"..(old+i*100).."/"..new+i.."/g' ./output/script/c*.lua")	
		table.insert(script_,"sed -i 's/"..new.."+"..i.."00/"..new+i.."/g' ./output/script/c*.lua")		
	end
	table.insert(sql,"UPDATE datas SET alias="..new.." WHERE alias="..old..";")
	table.insert(sql,"UPDATE datas SET id="..new.." WHERE id="..old..";")
	table.insert(sql,"UPDATE texts SET id="..new.." WHERE id="..old..";")
end
function Output()
	local f=io.open("replace.sh","w")
	for _,s in ipairs(script) do
		f:write(s)
		f:write("\n")
	end
	f:close()
	local f=io.open("replace.sql","w")
	for _,s in ipairs(sql) do
		f:write(s)
		f:write("\n")
	end
	f:close()
end

local old,old_rev,old_count=LoadDB("ygopro-pre-data/expansions/pre-release.cdb")
local new,new_rev,new_count=LoadDB("cards.cdb")
output_func(old_count.." "..new_count)
table.insert(script,"#!/bin/bash")
table.insert(script,"# Generated by Precode Replacer.")
table.insert(script,"rm -rf ./output")
table.insert(script,"mkdir ./output")
table.insert(script,"mkdir ./output/pics")
table.insert(script,"mkdir ./output/script")
table.insert(script,"cp -rf ./ygopro-pre-script/scripts/**/c?????????.lua ./output/script/")
table.insert(script,"cp -rf ./ygopro-pre-images/pics/* ./output/pics/")
table.insert(script,"cp -rf ./ygopro-pre-data/field ./output/pics/")
table.insert(script,"rm -rf ./output/pics/field/.gitkeep")
for code,name in pairs(new) do
	local old_code=old_rev[name]
	Replace(old_code,code)
end
table.insert(script,"echo \"Removing useless files.\"")
table.insert(script,"rm -rf ./output/script/c?????????.lua")
table.insert(script,"rm -rf ./output/pics/?????????.jpg")
table.insert(script,"rm -rf ./output/pics/?????????.png")
table.insert(script,"rm -rf ./output/pics/field/?????????.jpg")
table.insert(script,"rm -rf ./output/pics/field/?????????.png")
for _,line in ipairs(script_) do
	table.insert(script,line)
end
table.insert(script,"rm -rf ./output/script/sed*")
Output()
